#input: [0,1,0,3,12]
#output: [1,3,12,0,0]

"""
Want to move all zeros in an arry to the end of the array.

Need to preserve order of non-zero terms. 

Create a new array and loop over it, if a number is not zero add it to a new array, 

However, problem asks for this to be done in place.

Also want to minimize the number of operations


Main idea is to have the prev pointer to hold onto the zero index.
"""


"""
Move something forward and push something back using two pointers, i and j
i = 0 
prev = 0 (where zeros are) 
"""

"""
[0,1,0,3,12]
[1,0,0,3,12]
[1,0,0,3,12]
[1,3,0,0,12]
[1,3,12,0,0]
"""


class Solution: 
  def moveZeroes(self, nums: list[int]) -> None: 
  """
  Do not return anything, modify nums in-place instead.
  """
  prev_idx = 0
  for i in range(0,len(nums)): 
    if i nums[i] != 0: 
      hold = nums[prev_idx] 
      nums[prev_idx] = nums[i] 
      nums[i] = hold
      prev_idx+=1


